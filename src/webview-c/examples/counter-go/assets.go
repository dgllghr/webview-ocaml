// Code generated by go-bindata.
// sources:
// js/picodom/app.js
// js/picodom/vendor/picodom.js
// js/styles.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsPicodomAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x41\x6a\x44\x21\x0c\x86\xd7\x93\x53\x64\xa7\x01\x11\xba\xad\xbc\x03\xcc\x01\x7a\x00\x1b\x2d\x4a\x6d\x1c\x44\xdf\xe6\xe1\xdd\x8b\xd3\x19\xfa\x18\x57\xf2\x27\xf9\xf2\x65\xf7\x0d\x13\x6e\x78\xcb\x5c\x43\xfd\xb1\x09\xe0\x6b\x08\xf7\x5c\x05\x3f\xae\x9a\x09\x0f\xb8\xb4\xd8\x47\x13\x4c\x5a\x85\xbc\x2b\x83\x32\x4a\x31\x70\x59\xef\x25\x44\xb6\xc1\x77\x6f\x77\x5f\x46\xa4\x53\xcf\xe7\xe8\xbd\x8a\x32\x78\x54\xe1\x92\xf9\xfb\x1d\x9f\x7b\x34\x1d\x6c\x7d\x08\xfa\x8d\xe6\x34\xa8\xae\xc2\x4d\x11\x39\x98\x00\x4b\x4f\x6a\x88\xee\xdf\xaa\x45\x09\xb1\xe9\xbb\xd8\x2a\x9d\xe4\x6f\xbe\x73\xd2\x2b\x34\xf7\xa9\x6d\x5d\x50\x87\xf4\xd8\x88\x60\xc2\xe3\x6f\xff\x10\xb8\x3d\x58\x0e\x9e\x4c\x07\xbf\x01\x00\x00\xff\xff\x2d\x62\xcf\xeb\x10\x01\x00\x00")

func jsPicodomAppJsBytes() ([]byte, error) {
	return bindataRead(
		_jsPicodomAppJs,
		"js/picodom/app.js",
	)
}

func jsPicodomAppJs() (*asset, error) {
	bytes, err := jsPicodomAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/picodom/app.js", size: 272, mode: os.FileMode(436), modTime: time.Unix(1509657363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsPicodomVendorPicodomJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x56\x4d\x93\xa2\x48\x13\xfe\x2b\xca\xa1\xa2\x2a\xac\xa1\x9d\x79\x6f\x30\xf9\x1a\xdd\x1b\x7b\x9d\xcb\x6e\xec\xa5\x82\x03\x42\xa2\xac\x9a\x45\x14\x85\x4a\x08\xff\x7d\xa3\x28\x3e\x9c\x76\x67\x4f\x40\x7e\xe7\x93\x4f\xa6\xae\x8b\x86\x32\x5b\x6a\xe2\x28\x8d\x78\x04\x7a\xff\x37\x66\x36\x00\xb0\x6d\x85\xba\x58\xe1\xbd\xd2\xc6\xd6\x8c\x05\x0d\xe5\x58\x94\x84\x79\xb0\x9e\x94\x17\x9d\x37\x67\xdc\x19\x3e\x5a\x89\x28\x98\xc2\x2d\x11\xbc\x17\x63\xfe\x19\xa6\x97\x7c\xe7\x5f\xb9\x0a\x46\xbf\x20\x91\x46\x44\x86\x63\x58\x95\x99\xce\xf5\x05\x1e\xbd\xe8\xb9\x3d\x96\xb5\x5c\xea\x13\x8f\xa0\xa9\x71\x55\x5b\x53\x66\x36\x88\x27\xc5\xca\xf8\xd2\xaf\xa9\x59\x91\xb4\xa0\x92\xb8\xd0\x86\xd7\x90\x9a\x43\x73\x41\xb2\x75\x78\x46\x3a\xd8\x63\x5c\x7f\xf9\xb2\xfa\xff\xb7\x58\x64\x61\xd5\xd4\x47\x3e\xeb\x55\x9d\x88\xc1\x27\xce\x26\x53\x51\x16\xfc\xdd\x98\xb4\x0d\xcb\x7a\x78\x72\x82\x2c\xac\x74\xc5\x85\x10\x3e\x3c\x3d\x85\x9d\x63\xd2\x10\x0b\xcf\x35\xae\xa8\x39\x9f\xd7\x40\x8c\xad\xb7\x6b\x18\x9e\x5f\xfd\xd3\x7a\xd3\x80\x9a\xcb\x1e\xcd\x02\x14\xed\x68\x03\x41\x10\x91\x88\x0d\xda\xc6\x50\xe0\x5a\xa5\xc3\xd3\x30\x76\x0f\xf7\x16\xa1\xac\x8c\xae\xea\xc8\x74\xdd\xa3\x97\xd9\xb1\x3c\xe7\x06\x29\xb2\x7d\x84\xdc\xcb\xac\xe8\x67\x7c\x86\xd1\x4a\x92\x56\x3c\x5c\xe5\x0e\x27\x0d\x67\x4e\x5d\xc7\x09\x72\x9d\x0d\x20\x84\x7b\x9d\xb7\x42\x52\x38\x45\x53\xdb\x44\x3a\x5c\x63\x0b\xa9\x6f\x3c\x16\x96\x4f\xa5\xad\xf4\x12\xdf\x3e\xe1\x0f\x8f\x3e\x9e\x92\xd8\x55\x49\x2b\x14\xa4\x6c\x02\xa8\x6c\xf2\xb3\xc2\x78\x85\x71\x8a\x31\x26\x2d\x31\xb5\x8f\x59\x16\xfc\x15\x04\xe1\x33\xcd\x95\x67\x06\x53\x8b\x7f\xe2\xdd\xfe\xd0\x39\x72\xf4\xf8\x8f\xf5\x70\x03\xa6\xeb\x82\xfa\xea\x22\x00\x86\x2e\x88\xd8\x7d\xf2\xfd\xfd\x8c\xee\xeb\xc7\x1f\x3c\x38\x5a\x5b\x45\x6f\x6f\xb7\xdb\x2d\xbc\xfd\x2f\xd4\xe6\xf0\xf6\x6d\xbb\xdd\xbe\x39\x7f\x39\x7a\x47\xff\xee\xcd\x47\x75\x8c\xe1\x30\x1d\xc6\xc6\x97\x50\x93\x37\x64\x2c\xf5\xa3\x9f\x39\x2d\x1e\x9f\x6d\x38\x89\x5e\x2c\x48\xc1\x36\xb6\xdf\x71\x1e\xca\x44\x39\xbb\xd9\x08\x0a\xd3\xaa\x42\xca\x7f\x73\x3a\xae\xf9\x62\xa5\xac\xdb\x27\xf1\x69\x10\x3e\x91\xa8\x38\x49\x2b\xc7\x2f\x65\x13\xd1\xbf\xa2\x5f\x8d\x8c\xd1\x7e\x02\x27\x6c\x1d\x78\x66\x24\xb6\x1f\x4a\x7b\x46\x2f\x9c\xb2\x18\x97\xc5\x72\x2d\x09\xc8\x71\x50\x08\x0c\x07\x33\x65\x12\x20\x65\x92\xae\x0b\x02\x3f\x1a\x6b\xda\x87\x17\xf7\x59\x6a\xb3\xa3\xdb\xed\x7e\x39\x1d\xf3\x7d\x21\xc6\x38\xed\x30\xac\xd1\xbe\x5b\x6b\xca\x7d\x63\x91\x1b\x49\x22\xc2\xd0\xe0\x45\x5f\xf1\x49\x2c\x44\xbf\x74\x50\xfa\x0e\x9e\x18\xef\xab\x73\x32\x4f\xd5\x12\x48\xe9\x44\x16\x10\x5c\xd3\x73\x33\xf4\xa2\xbb\x2e\xc8\x8e\x98\x9d\x30\x1f\x3e\x77\xa8\x74\x12\x19\xa5\x93\xb8\x5c\x03\x14\x8c\x8d\x0f\x87\x8f\x96\xa5\x2c\x44\x4f\x8c\x51\xa8\xa9\xa9\xf2\x5f\x0c\x78\xd1\x0e\x94\xee\x9f\x16\xb3\x98\x8b\x5c\x56\xc9\x31\xc2\xb7\xe6\xe7\x6a\xe6\x14\x5e\xca\xd8\xeb\x89\xe5\x04\x8b\x81\x03\x62\x47\xdc\x8a\xc8\xf2\xa7\x5c\x8d\xc3\xb8\x2c\x38\xce\xb4\x14\xe3\xdc\x27\x06\x9e\xb0\x5d\xcc\xcf\xd3\xcd\x90\x95\xac\x07\x47\x77\xce\x00\x48\x18\xc0\xb0\xa4\x1a\x8d\xfd\xc0\x42\x1b\xe4\x9a\x5b\x59\x09\xf9\xc4\x0e\x7f\xf9\xec\xb0\x0e\xee\xdc\xb9\x27\x00\x90\xdf\x8f\x47\xe9\xa6\xe0\x93\x4a\x3b\xd6\x22\x2b\xa8\x96\x35\xf5\x2e\x33\x7f\x33\xb0\x9f\x37\x40\xa6\x40\x2f\xb2\x1c\x1e\xbd\x3c\x82\x4a\xe4\xd5\xbd\xb5\xb0\x8d\xdb\xef\x69\xdc\x6e\x36\x7e\xe4\x07\x38\xaa\x36\x01\xe3\x1d\xdd\xb1\xa8\x55\x9b\xc8\xcb\x53\x28\xf7\xbd\x87\x86\x5f\x44\xec\xbb\xd8\x33\xc6\x73\xb5\x4f\x40\x1d\xe4\x25\x11\xfd\x54\x53\x0b\x5b\x79\x82\x6d\x7c\xfa\x9e\xc5\xcf\xd1\x5f\xa2\xdd\x9e\x8a\x57\xa7\x39\x7a\x59\xf0\xab\xda\x27\xa2\xdd\x6c\x96\x73\x75\x87\x86\xdf\x84\x7c\x87\x5c\xdd\x93\xae\x53\x49\xec\x51\xbf\xef\x46\xf8\x5d\x35\x67\x6e\xe4\x41\x5e\xe4\xcd\xa1\x7e\xda\x6c\x84\x74\x0d\x46\x7c\x0f\x83\xa1\x53\xbf\xbb\xe3\xfd\xae\xbe\x26\xde\x68\xd0\x3b\xd9\x8e\x9b\x9f\x67\x37\x18\x1e\x84\x7c\x75\x12\x91\xcf\xe3\xf2\xce\xa9\xe4\x55\xdd\x13\xb8\xb9\x45\x73\xbf\x96\x0e\x5c\xdf\xfb\x7f\x40\x38\x14\x5d\x70\x23\x3d\x3a\xd3\xbc\xdb\xcd\x66\xc1\xd2\xed\x66\xee\x23\xb9\xde\xdb\x44\x7e\x80\xab\x24\xbe\xaa\x8f\x85\x9d\x49\xd7\x15\x53\x9d\xa3\x58\xf4\xfd\x40\x3a\xc3\x98\x5d\x03\x98\x90\x74\x8e\x7f\xb9\x7d\x66\xec\xf5\x97\xc3\x32\xf6\x22\xa3\xdd\x93\x13\xd8\x88\xff\x8a\xdf\x35\x18\x21\xdd\xc6\xd6\x13\x79\x85\x98\x7f\x0d\x4d\xef\x6a\xaf\x65\xe6\xc8\x97\xba\xbf\x20\x18\x1e\xc1\xb8\x33\xeb\xee\x1b\x50\x2f\xe2\x7f\x02\x00\x00\xff\xff\xb0\xd0\xc8\xc4\x6a\x09\x00\x00")

func jsPicodomVendorPicodomJsBytes() ([]byte, error) {
	return bindataRead(
		_jsPicodomVendorPicodomJs,
		"js/picodom/vendor/picodom.js",
	)
}

func jsPicodomVendorPicodomJs() (*asset, error) {
	bytes, err := jsPicodomVendorPicodomJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/picodom/vendor/picodom.js", size: 2410, mode: os.FileMode(436), modTime: time.Unix(1509657363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsStylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x41\xca\x83\x30\x10\x05\xe0\x75\xe6\x14\x03\xf2\x6f\x7e\x0c\x68\x5b\x0a\x4d\x4e\x93\x98\x18\x43\x35\x23\x69\x04\xdb\xe2\xdd\x4b\x22\x95\xce\xee\xbd\x79\x7c\xff\xf8\x06\x36\xa9\xe8\x7c\x10\xd8\x48\x60\xb3\x32\xc6\x07\xb7\x07\x4d\x2b\x7f\xf8\x57\xc9\x9a\xa2\xb1\x91\x6b\x5a\x25\x6c\x00\x9a\xcc\xb3\xc6\x21\x4d\x63\x8d\x95\x9a\xe7\xe2\xf8\xc0\x07\xeb\xdd\x90\x04\xb6\x4d\xf3\x77\x0c\xf3\xf3\x80\x4f\x76\x92\xc0\x7a\x0a\x29\xdb\x56\xe0\xa5\x14\x5a\x75\x77\x17\x69\x09\x86\x77\x34\x52\x14\x58\xd9\x5b\x6b\xaf\x67\x09\xec\x5b\xf4\xe5\x76\x76\x49\x89\x42\x86\x7f\xa4\x36\x4b\x1b\x7c\x02\x00\x00\xff\xff\x0b\x69\x24\xff\xd5\x00\x00\x00")

func jsStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_jsStylesCss,
		"js/styles.css",
	)
}

func jsStylesCss() (*asset, error) {
	bytes, err := jsStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/styles.css", size: 213, mode: os.FileMode(436), modTime: time.Unix(1509657363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/picodom/app.js": jsPicodomAppJs,
	"js/picodom/vendor/picodom.js": jsPicodomVendorPicodomJs,
	"js/styles.css": jsStylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"picodom": &bintree{nil, map[string]*bintree{
			"app.js": &bintree{jsPicodomAppJs, map[string]*bintree{}},
			"vendor": &bintree{nil, map[string]*bintree{
				"picodom.js": &bintree{jsPicodomVendorPicodomJs, map[string]*bintree{}},
			}},
		}},
		"styles.css": &bintree{jsStylesCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

